"""
System Monitor Component
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
"""
import streamlit as st
import requests
from datetime import datetime
import time

def render_system_monitor(api_url: str = "http://localhost:8000"):
    """Render system monitoring interface"""
    
    st.subheader("üñ•Ô∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö")
    
    # Auto-refresh toggle
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.write("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö RAG Chatbot")
    
    with col2:
        auto_refresh = st.checkbox("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    
    # Create placeholder for dynamic updates
    status_container = st.container()
    
    # Get system status
    system_status = get_system_status(api_url)
    
    with status_container:
        render_system_status(system_status)
    
    # Auto refresh
    if auto_refresh:
        time.sleep(5)
        st.rerun()

def get_system_status(api_url: str) -> dict:
    """Get system health status"""
    
    try:
        response = requests.get(f"{api_url}/health", timeout=10)
        
        if response.status_code == 200:
            return response.json()
        else:
            return {"status": "error", "message": f"HTTP {response.status_code}"}
            
    except requests.exceptions.ConnectException:
        return {"status": "offline", "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ"}
    except requests.exceptions.Timeout:
        return {"status": "timeout", "message": "API ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ä‡πâ‡∏≤"}
    except Exception as e:
        return {"status": "error", "message": str(e)}

def render_system_status(status: dict):
    """Render system status display"""
    
    if status.get("status") == "healthy":
        st.success("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
        
        # Show detailed status
        if "pipeline_initialized" in status:
            st.info(f"üîß Pipeline: {'‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if status['pipeline_initialized'] else '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'}")
        
        # Services status
        if "services" in status and status["services"]:
            st.write("**üì° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API Services:**")
            
            cols = st.columns(len(status["services"]))
            for i, (service, is_healthy) in enumerate(status["services"].items()):
                with cols[i]:
                    icon = "‚úÖ" if is_healthy else "‚ùå"
                    st.metric(f"{icon} {service}", "‡∏û‡∏£‡πâ‡∏≠‡∏°" if is_healthy else "‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°")
        
        # Components status
        if "components" in status and status["components"]:
            st.write("**üîß ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Components:**")
            
            for component, component_status in status["components"].items():
                if isinstance(component_status, dict):
                    available_models = component_status.get("available_models", 0)
                    st.metric(f"ü§ñ {component}", f"{available_models} ‡πÇ‡∏°‡πÄ‡∏î‡∏•")
        
        # Database status
        if "database" in status and status["database"]:
            db_status = status["database"]
            if "error" not in db_status:
                st.write("**üóÑÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**")
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("üìÑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô chunks", db_status.get("document_count", 0))
                with col2:
                    st.metric("üíæ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            else:
                st.error(f"‚ùå ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {db_status['error']}")
    
    elif status.get("status") == "offline":
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ")
        st.write("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
        
    elif status.get("status") == "timeout":
        st.warning("‚è≥ API ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ä‡πâ‡∏≤")
        st.write("‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á")
        
    else:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {status.get('message', 'Unknown error')}")
    
    # Show last update time
    st.caption(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {datetime.now().strftime('%H:%M:%S')}")

def render_model_settings(api_url: str = "http://localhost:8000"):
    """Render model configuration settings"""
    
    st.subheader("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    
    try:
        response = requests.get(f"{api_url}/models")
        
        if response.status_code == 200:
            models_info = response.json()
            
            # Available models
            if "available_models" in models_info:
                st.write("**ü§ñ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**")
                
                available = models_info["available_models"]
                for service_name, is_available in available.items():
                    status_icon = "‚úÖ" if is_available else "‚ùå"
                    st.write(f"{status_icon} {service_name}: {'‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if is_available else '‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'}")
            
            # Pipeline config
            if "pipeline_config" in models_info:
                st.write("**‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Pipeline:**")
                config = models_info["pipeline_config"]
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric("üìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß Context ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", config.get("max_context_length", "N/A"))
                    st.metric("üîç ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Retrieval", config.get("top_k_retrieval", "N/A"))
                
                with col2:
                    st.metric("üìÑ ‡∏Ç‡∏ô‡∏≤‡∏î Chunk", config.get("chunk_size", "N/A"))
                    st.metric("ü§ñ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", config.get("default_model", "N/A") or "Auto")
        
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ: {str(e)}")

def render_performance_metrics(api_url: str = "http://localhost:8000"):
    """Render system performance metrics"""
    
    st.subheader("üìà ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö")
    
    try:
        response = requests.get(f"{api_url}/stats")
        
        if response.status_code == 200:
            stats = response.json()
            
            # Performance metrics in columns
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üìö ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", stats.get("documents_in_database", 0))
            
            with col2:
                st.metric("ü§ñ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ", stats.get("available_models", 0))
            
            with col3:
                # This would need to be tracked separately
                st.metric("üîç Query ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "N/A", help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
            
            # Additional metrics can be added here
            # - Response time statistics
            # - Error rates
            # - Resource usage
            
        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
    
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")